
OO基础：多态（很多设计模式的实现就是多态的运用，比如工厂）、封装、继承、抽象
OO原则：封装变化，多用组合少用继承，针对接口编程不针对实现编程
OO模式：策略模式，定义算法族，分别封装起来，让他们之前可以互相替换，此模式让算法的变化独立于使用算法的客户。

1、开闭原则
   对修改封闭，对拓展开放

2、单一职责原则
   一个类应该只负责一项职责

3、里氏替换原则
   所有引用基类（父类）的地方必须能透明地使用其子类的对象。即程序中将一个基类替换成它的子类，程序不会产生任何错误
   和以常，反过来不成立。

4、迪米特原则
   一个软件实体应当尽可能少地与其他实体发生相互作用。即模块之间应该保持松耦合。

5、依赖倒置原则
   抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。
   在简单工厂中，所有产品的创建都在orderPizza方法中，即产品的创建依赖于PizzaStore类，
   而在抽象工厂中，产品的创建依赖于FoodStore中的抽象类型，

6、接口隔离原则
   使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。